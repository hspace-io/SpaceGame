# hspace{1_4dm1t_4a4a4arch64_4ss3mbly_1s_v3ry_e4sy_4ft3r_4ll_0f_guys_hehe}
def inv_ror(b):
    res = 0
    if b & 0x01: res |= 0x08
    if b & 0x02: res |= 0x10
    if b & 0x04: res |= 0x20
    if b & 0x08: res |= 0x40
    if b & 0x10: res |= 0x80
    if b & 0x20: res |= 0x01
    if b & 0x40: res |= 0x02
    if b & 0x80: res |= 0x04
    return res

def inv_xorAdd(c, key):
    return (c - key) & 0xff ^ key

def decrypt_byte(c, key):
    masked = inv_xorAdd(c, key)
    return inv_ror(masked)

array = [
    0x8d, 0x6e, 0x8e, 0xac, 0x6c, 0x2c, 0x6f, 0xb6, 0xeb, 0x16, 0x0c, 0x2d, 0xb6, 0x0e, 0xeb, 0x16,
    0xac, 0x16, 0xac, 0x16, 0xac, 0x4e, 0x6c, 0x8d, 0xd6, 0x16, 0xeb, 0x16, 0x6e, 0x6e, 0x76, 0x2d,
    0x4c, 0x0d, 0xaf, 0xeb, 0xb6, 0x6e, 0xeb, 0xce, 0x76, 0x4e, 0xaf, 0xeb, 0x2c, 0x16, 0x6e, 0xaf,
    0xeb, 0x16, 0xcc, 0x0e, 0x76, 0x4e, 0xeb, 0x16, 0x0d, 0x0d, 0xeb, 0x96, 0xcc, 0xeb, 0xec, 0x2e,
    0xaf, 0x6e, 0xeb, 0x8d, 0x2c, 0x8d, 0x2c, 0x2f
]

flag = bytes(decrypt_byte(b, len(array)) for b in array)
print("Decrypted:", flag)